{"ast":null,"code":"import React,{createContext,useState,useEffect,useCallback}from\"react\";import{ethers}from\"ethers\";import{jsx as _jsx}from\"react/jsx-runtime\";export const WalletContext=/*#__PURE__*/createContext();export const WalletProvider=_ref=>{let{children}=_ref;const[provider,setProvider]=useState(null);const[signer,setSigner]=useState(null);const[address,setAddress]=useState(\"\");const[chainId,setChainId]=useState(null);const[isConnected,setIsConnected]=useState(false);const[error,setError]=useState(null);// Check if wallet is already connected on component mount\nuseEffect(()=>{const checkConnection=async()=>{if(window.ethereum){try{// Get connected accounts\nconst accounts=await window.ethereum.request({method:\"eth_accounts\"});if(accounts.length>0){const provider=new ethers.providers.Web3Provider(window.ethereum);const signer=provider.getSigner();const address=await signer.getAddress();const network=await provider.getNetwork();setProvider(provider);setSigner(signer);setAddress(address);setChainId(network.chainId);setIsConnected(true);}}catch(error){console.error(\"Error checking wallet connection:\",error);setError(error.message);}}};checkConnection();},[]);const handleAccountsChanged=useCallback(async accounts=>{if(accounts.length===0){// User disconnected their wallet\ndisconnect();}else{// Account changed, update state\nconst provider=new ethers.providers.Web3Provider(window.ethereum);const signer=provider.getSigner();const address=await signer.getAddress();setProvider(provider);setSigner(signer);setAddress(address);setIsConnected(true);}},[]);const handleChainChanged=chainIdHex=>{// Chain changed, reload the page as recommended by MetaMask\nwindow.location.reload();};// Listen for account and chain changes\nuseEffect(()=>{if(window.ethereum){window.ethereum.on(\"accountsChanged\",handleAccountsChanged);window.ethereum.on(\"chainChanged\",handleChainChanged);return()=>{window.ethereum.removeListener(\"accountsChanged\",handleAccountsChanged);window.ethereum.removeListener(\"chainChanged\",handleChainChanged);};}},[handleAccountsChanged]);const connect=async()=>{if(!window.ethereum){setError(\"No Ethereum wallet found. Please install MetaMask.\");return false;}try{// Request account access\nawait window.ethereum.request({method:\"eth_requestAccounts\"});const provider=new ethers.providers.Web3Provider(window.ethereum);const signer=provider.getSigner();const address=await signer.getAddress();const network=await provider.getNetwork();setProvider(provider);setSigner(signer);setAddress(address);setChainId(network.chainId);setIsConnected(true);setError(null);return true;}catch(error){console.error(\"Error connecting to wallet:\",error);setError(error.message);return false;}};const disconnect=()=>{setProvider(null);setSigner(null);setAddress(\"\");setChainId(null);setIsConnected(false);};const switchChain=async targetChainId=>{if(!window.ethereum){setError(\"No Ethereum wallet found. Please install MetaMask.\");return false;}try{await window.ethereum.request({method:\"wallet_switchEthereumChain\",params:[{chainId:ethers.utils.hexValue(targetChainId)}]});return true;}catch(error){console.error(\"Error switching chain:\",error);setError(error.message);return false;}};const value={provider,signer,address,chainId,isConnected,error,connect,disconnect,switchChain};return/*#__PURE__*/_jsx(WalletContext.Provider,{value:value,children:children});};","map":{"version":3,"names":["React","createContext","useState","useEffect","useCallback","ethers","jsx","_jsx","WalletContext","WalletProvider","_ref","children","provider","setProvider","signer","setSigner","address","setAddress","chainId","setChainId","isConnected","setIsConnected","error","setError","checkConnection","window","ethereum","accounts","request","method","length","providers","Web3Provider","getSigner","getAddress","network","getNetwork","console","message","handleAccountsChanged","disconnect","handleChainChanged","chainIdHex","location","reload","on","removeListener","connect","switchChain","targetChainId","params","utils","hexValue","value","Provider"],"sources":["/home/nishant/proofchain/frontend/src/context/WalletContext.js"],"sourcesContent":["import React, { createContext, useState, useEffect, useCallback } from \"react\";\nimport { ethers } from \"ethers\";\n\nexport const WalletContext = createContext();\n\nexport const WalletProvider = ({ children }) => {\n  const [provider, setProvider] = useState(null);\n  const [signer, setSigner] = useState(null);\n  const [address, setAddress] = useState(\"\");\n  const [chainId, setChainId] = useState(null);\n  const [isConnected, setIsConnected] = useState(false);\n  const [error, setError] = useState(null);\n\n  // Check if wallet is already connected on component mount\n  useEffect(() => {\n    const checkConnection = async () => {\n      if (window.ethereum) {\n        try {\n          // Get connected accounts\n          const accounts = await window.ethereum.request({\n            method: \"eth_accounts\",\n          });\n\n          if (accounts.length > 0) {\n            const provider = new ethers.providers.Web3Provider(window.ethereum);\n            const signer = provider.getSigner();\n            const address = await signer.getAddress();\n            const network = await provider.getNetwork();\n\n            setProvider(provider);\n            setSigner(signer);\n            setAddress(address);\n            setChainId(network.chainId);\n            setIsConnected(true);\n          }\n        } catch (error) {\n          console.error(\"Error checking wallet connection:\", error);\n          setError(error.message);\n        }\n      }\n    };\n\n    checkConnection();\n  }, []);\n\n  const handleAccountsChanged = useCallback(async (accounts) => {\n    if (accounts.length === 0) {\n      // User disconnected their wallet\n      disconnect();\n    } else {\n      // Account changed, update state\n      const provider = new ethers.providers.Web3Provider(window.ethereum);\n      const signer = provider.getSigner();\n      const address = await signer.getAddress();\n\n      setProvider(provider);\n      setSigner(signer);\n      setAddress(address);\n      setIsConnected(true);\n    }\n  }, []);\n\n  const handleChainChanged = (chainIdHex) => {\n    // Chain changed, reload the page as recommended by MetaMask\n    window.location.reload();\n  };\n\n  // Listen for account and chain changes\n  useEffect(() => {\n    if (window.ethereum) {\n      window.ethereum.on(\"accountsChanged\", handleAccountsChanged);\n      window.ethereum.on(\"chainChanged\", handleChainChanged);\n\n      return () => {\n        window.ethereum.removeListener(\n          \"accountsChanged\",\n          handleAccountsChanged\n        );\n        window.ethereum.removeListener(\"chainChanged\", handleChainChanged);\n      };\n    }\n  }, [handleAccountsChanged]);\n\n  const connect = async () => {\n    if (!window.ethereum) {\n      setError(\"No Ethereum wallet found. Please install MetaMask.\");\n      return false;\n    }\n\n    try {\n      // Request account access\n      await window.ethereum.request({\n        method: \"eth_requestAccounts\",\n      });\n\n      const provider = new ethers.providers.Web3Provider(window.ethereum);\n      const signer = provider.getSigner();\n      const address = await signer.getAddress();\n      const network = await provider.getNetwork();\n\n      setProvider(provider);\n      setSigner(signer);\n      setAddress(address);\n      setChainId(network.chainId);\n      setIsConnected(true);\n      setError(null);\n\n      return true;\n    } catch (error) {\n      console.error(\"Error connecting to wallet:\", error);\n      setError(error.message);\n      return false;\n    }\n  };\n\n  const disconnect = () => {\n    setProvider(null);\n    setSigner(null);\n    setAddress(\"\");\n    setChainId(null);\n    setIsConnected(false);\n  };\n\n  const switchChain = async (targetChainId) => {\n    if (!window.ethereum) {\n      setError(\"No Ethereum wallet found. Please install MetaMask.\");\n      return false;\n    }\n\n    try {\n      await window.ethereum.request({\n        method: \"wallet_switchEthereumChain\",\n        params: [{ chainId: ethers.utils.hexValue(targetChainId) }],\n      });\n      return true;\n    } catch (error) {\n      console.error(\"Error switching chain:\", error);\n      setError(error.message);\n      return false;\n    }\n  };\n\n  const value = {\n    provider,\n    signer,\n    address,\n    chainId,\n    isConnected,\n    error,\n    connect,\n    disconnect,\n    switchChain,\n  };\n\n  return (\n    <WalletContext.Provider value={value}>{children}</WalletContext.Provider>\n  );\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}