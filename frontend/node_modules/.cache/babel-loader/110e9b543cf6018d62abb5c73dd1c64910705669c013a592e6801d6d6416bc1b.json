{"ast":null,"code":"var _jsxFileName = \"/home/nishant/Downloads/proofchain/frontend/src/context/WalletContext.js\",\n  _s = $RefreshSig$();\nimport React, { createContext, useState, useEffect, useCallback } from \"react\";\nimport { ethers } from \"ethers\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const WalletContext = /*#__PURE__*/createContext();\nexport const WalletProvider = ({\n  children\n}) => {\n  _s();\n  const [provider, setProvider] = useState(null);\n  const [signer, setSigner] = useState(null);\n  const [address, setAddress] = useState(\"\");\n  const [chainId, setChainId] = useState(null);\n  const [isConnected, setIsConnected] = useState(false);\n  const [error, setError] = useState(null);\n\n  // Check if wallet is already connected on component mount\n  useEffect(() => {\n    const checkConnection = async () => {\n      if (window.ethereum) {\n        try {\n          // Get connected accounts\n          const accounts = await window.ethereum.request({\n            method: \"eth_accounts\"\n          });\n          if (accounts.length > 0) {\n            const provider = new ethers.providers.Web3Provider(window.ethereum);\n            const signer = provider.getSigner();\n            const address = await signer.getAddress();\n            const network = await provider.getNetwork();\n            setProvider(provider);\n            setSigner(signer);\n            setAddress(address);\n            setChainId(network.chainId);\n            setIsConnected(true);\n          }\n        } catch (error) {\n          console.error(\"Error checking wallet connection:\", error);\n          setError(error.message);\n        }\n      }\n    };\n    checkConnection();\n  }, []);\n  const handleAccountsChanged = useCallback(async accounts => {\n    if (accounts.length === 0) {\n      // User disconnected their wallet\n      disconnect();\n    } else {\n      // Account changed, update state\n      const provider = new ethers.providers.Web3Provider(window.ethereum);\n      const signer = provider.getSigner();\n      const address = await signer.getAddress();\n      setProvider(provider);\n      setSigner(signer);\n      setAddress(address);\n      setIsConnected(true);\n    }\n  }, []);\n  const handleChainChanged = chainIdHex => {\n    // Chain changed, reload the page as recommended by MetaMask\n    window.location.reload();\n  };\n\n  // Listen for account and chain changes\n  useEffect(() => {\n    if (window.ethereum) {\n      window.ethereum.on(\"accountsChanged\", handleAccountsChanged);\n      window.ethereum.on(\"chainChanged\", handleChainChanged);\n      return () => {\n        window.ethereum.removeListener(\"accountsChanged\", handleAccountsChanged);\n        window.ethereum.removeListener(\"chainChanged\", handleChainChanged);\n      };\n    }\n  }, [handleAccountsChanged]);\n  const connect = async () => {\n    if (!window.ethereum) {\n      setError(\"No Ethereum wallet found. Please install MetaMask.\");\n      return false;\n    }\n    try {\n      // Request account access\n      await window.ethereum.request({\n        method: \"eth_requestAccounts\"\n      });\n      const provider = new ethers.providers.Web3Provider(window.ethereum);\n      const signer = provider.getSigner();\n      const address = await signer.getAddress();\n      const network = await provider.getNetwork();\n      setProvider(provider);\n      setSigner(signer);\n      setAddress(address);\n      setChainId(network.chainId);\n      setIsConnected(true);\n      setError(null);\n      return true;\n    } catch (error) {\n      console.error(\"Error connecting to wallet:\", error);\n      setError(error.message);\n      return false;\n    }\n  };\n  const disconnect = () => {\n    setProvider(null);\n    setSigner(null);\n    setAddress(\"\");\n    setChainId(null);\n    setIsConnected(false);\n  };\n  const switchChain = async targetChainId => {\n    if (!window.ethereum) {\n      setError(\"No Ethereum wallet found. Please install MetaMask.\");\n      return false;\n    }\n    try {\n      await window.ethereum.request({\n        method: \"wallet_switchEthereumChain\",\n        params: [{\n          chainId: ethers.utils.hexValue(targetChainId)\n        }]\n      });\n      return true;\n    } catch (error) {\n      console.error(\"Error switching chain:\", error);\n      setError(error.message);\n      return false;\n    }\n  };\n  const value = {\n    provider,\n    signer,\n    address,\n    chainId,\n    isConnected,\n    error,\n    connect,\n    disconnect,\n    switchChain\n  };\n  return /*#__PURE__*/_jsxDEV(WalletContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 156,\n    columnNumber: 5\n  }, this);\n};\n_s(WalletProvider, \"cRBUPzlgxlo4uqqlLMZcZc3P2Ig=\");\n_c = WalletProvider;\nvar _c;\n$RefreshReg$(_c, \"WalletProvider\");","map":{"version":3,"names":["React","createContext","useState","useEffect","useCallback","ethers","jsxDEV","_jsxDEV","WalletContext","WalletProvider","children","_s","provider","setProvider","signer","setSigner","address","setAddress","chainId","setChainId","isConnected","setIsConnected","error","setError","checkConnection","window","ethereum","accounts","request","method","length","providers","Web3Provider","getSigner","getAddress","network","getNetwork","console","message","handleAccountsChanged","disconnect","handleChainChanged","chainIdHex","location","reload","on","removeListener","connect","switchChain","targetChainId","params","utils","hexValue","value","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/home/nishant/Downloads/proofchain/frontend/src/context/WalletContext.js"],"sourcesContent":["import React, { createContext, useState, useEffect, useCallback } from \"react\";\nimport { ethers } from \"ethers\";\n\nexport const WalletContext = createContext();\n\nexport const WalletProvider = ({ children }) => {\n  const [provider, setProvider] = useState(null);\n  const [signer, setSigner] = useState(null);\n  const [address, setAddress] = useState(\"\");\n  const [chainId, setChainId] = useState(null);\n  const [isConnected, setIsConnected] = useState(false);\n  const [error, setError] = useState(null);\n\n  // Check if wallet is already connected on component mount\n  useEffect(() => {\n    const checkConnection = async () => {\n      if (window.ethereum) {\n        try {\n          // Get connected accounts\n          const accounts = await window.ethereum.request({\n            method: \"eth_accounts\",\n          });\n\n          if (accounts.length > 0) {\n            const provider = new ethers.providers.Web3Provider(window.ethereum);\n            const signer = provider.getSigner();\n            const address = await signer.getAddress();\n            const network = await provider.getNetwork();\n\n            setProvider(provider);\n            setSigner(signer);\n            setAddress(address);\n            setChainId(network.chainId);\n            setIsConnected(true);\n          }\n        } catch (error) {\n          console.error(\"Error checking wallet connection:\", error);\n          setError(error.message);\n        }\n      }\n    };\n\n    checkConnection();\n  }, []);\n\n  const handleAccountsChanged = useCallback(async (accounts) => {\n    if (accounts.length === 0) {\n      // User disconnected their wallet\n      disconnect();\n    } else {\n      // Account changed, update state\n      const provider = new ethers.providers.Web3Provider(window.ethereum);\n      const signer = provider.getSigner();\n      const address = await signer.getAddress();\n\n      setProvider(provider);\n      setSigner(signer);\n      setAddress(address);\n      setIsConnected(true);\n    }\n  }, []);\n\n  const handleChainChanged = (chainIdHex) => {\n    // Chain changed, reload the page as recommended by MetaMask\n    window.location.reload();\n  };\n\n  // Listen for account and chain changes\n  useEffect(() => {\n    if (window.ethereum) {\n      window.ethereum.on(\"accountsChanged\", handleAccountsChanged);\n      window.ethereum.on(\"chainChanged\", handleChainChanged);\n\n      return () => {\n        window.ethereum.removeListener(\n          \"accountsChanged\",\n          handleAccountsChanged\n        );\n        window.ethereum.removeListener(\"chainChanged\", handleChainChanged);\n      };\n    }\n  }, [handleAccountsChanged]);\n\n  const connect = async () => {\n    if (!window.ethereum) {\n      setError(\"No Ethereum wallet found. Please install MetaMask.\");\n      return false;\n    }\n\n    try {\n      // Request account access\n      await window.ethereum.request({\n        method: \"eth_requestAccounts\",\n      });\n\n      const provider = new ethers.providers.Web3Provider(window.ethereum);\n      const signer = provider.getSigner();\n      const address = await signer.getAddress();\n      const network = await provider.getNetwork();\n\n      setProvider(provider);\n      setSigner(signer);\n      setAddress(address);\n      setChainId(network.chainId);\n      setIsConnected(true);\n      setError(null);\n\n      return true;\n    } catch (error) {\n      console.error(\"Error connecting to wallet:\", error);\n      setError(error.message);\n      return false;\n    }\n  };\n\n  const disconnect = () => {\n    setProvider(null);\n    setSigner(null);\n    setAddress(\"\");\n    setChainId(null);\n    setIsConnected(false);\n  };\n\n  const switchChain = async (targetChainId) => {\n    if (!window.ethereum) {\n      setError(\"No Ethereum wallet found. Please install MetaMask.\");\n      return false;\n    }\n\n    try {\n      await window.ethereum.request({\n        method: \"wallet_switchEthereumChain\",\n        params: [{ chainId: ethers.utils.hexValue(targetChainId) }],\n      });\n      return true;\n    } catch (error) {\n      console.error(\"Error switching chain:\", error);\n      setError(error.message);\n      return false;\n    }\n  };\n\n  const value = {\n    provider,\n    signer,\n    address,\n    chainId,\n    isConnected,\n    error,\n    connect,\n    disconnect,\n    switchChain,\n  };\n\n  return (\n    <WalletContext.Provider value={value}>{children}</WalletContext.Provider>\n  );\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}