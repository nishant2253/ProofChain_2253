{"ast":null,"code":"var _jsxFileName = \"/home/nishant/Downloads/proofchain/frontend/src/context/ThemeContext.js\",\n  _s = $RefreshSig$();\nimport React, { createContext, useState, useEffect } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const ThemeContext = /*#__PURE__*/createContext();\nexport const ThemeProvider = ({\n  children\n}) => {\n  _s();\n  const [isDarkMode, setIsDarkMode] = useState(false);\n\n  // Initialize theme based on user preference or system preference\n  useEffect(() => {\n    const savedTheme = localStorage.getItem(\"theme\");\n    if (savedTheme === \"dark\") {\n      setIsDarkMode(true);\n      document.documentElement.classList.add(\"dark\");\n    } else if (savedTheme === \"light\") {\n      setIsDarkMode(false);\n      document.documentElement.classList.remove(\"dark\");\n    } else {\n      // Check system preference\n      const prefersDark = window.matchMedia(\"(prefers-color-scheme: dark)\").matches;\n      setIsDarkMode(prefersDark);\n      if (prefersDark) {\n        document.documentElement.classList.add(\"dark\");\n      }\n    }\n  }, []);\n\n  // Toggle theme function\n  const toggleTheme = () => {\n    setIsDarkMode(prevMode => {\n      const newMode = !prevMode;\n      if (newMode) {\n        document.documentElement.classList.add(\"dark\");\n        localStorage.setItem(\"theme\", \"dark\");\n      } else {\n        document.documentElement.classList.remove(\"dark\");\n        localStorage.setItem(\"theme\", \"light\");\n      }\n      return newMode;\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(ThemeContext.Provider, {\n    value: {\n      isDarkMode,\n      toggleTheme\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 45,\n    columnNumber: 5\n  }, this);\n};\n_s(ThemeProvider, \"bUs4CHDjU8AH+ZZYt8wlh4bHppI=\");\n_c = ThemeProvider;\nexport default ThemeProvider;\nvar _c;\n$RefreshReg$(_c, \"ThemeProvider\");","map":{"version":3,"names":["React","createContext","useState","useEffect","jsxDEV","_jsxDEV","ThemeContext","ThemeProvider","children","_s","isDarkMode","setIsDarkMode","savedTheme","localStorage","getItem","document","documentElement","classList","add","remove","prefersDark","window","matchMedia","matches","toggleTheme","prevMode","newMode","setItem","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/home/nishant/Downloads/proofchain/frontend/src/context/ThemeContext.js"],"sourcesContent":["import React, { createContext, useState, useEffect } from \"react\";\n\nexport const ThemeContext = createContext();\n\nexport const ThemeProvider = ({ children }) => {\n  const [isDarkMode, setIsDarkMode] = useState(false);\n\n  // Initialize theme based on user preference or system preference\n  useEffect(() => {\n    const savedTheme = localStorage.getItem(\"theme\");\n    if (savedTheme === \"dark\") {\n      setIsDarkMode(true);\n      document.documentElement.classList.add(\"dark\");\n    } else if (savedTheme === \"light\") {\n      setIsDarkMode(false);\n      document.documentElement.classList.remove(\"dark\");\n    } else {\n      // Check system preference\n      const prefersDark = window.matchMedia(\n        \"(prefers-color-scheme: dark)\"\n      ).matches;\n      setIsDarkMode(prefersDark);\n      if (prefersDark) {\n        document.documentElement.classList.add(\"dark\");\n      }\n    }\n  }, []);\n\n  // Toggle theme function\n  const toggleTheme = () => {\n    setIsDarkMode((prevMode) => {\n      const newMode = !prevMode;\n      if (newMode) {\n        document.documentElement.classList.add(\"dark\");\n        localStorage.setItem(\"theme\", \"dark\");\n      } else {\n        document.documentElement.classList.remove(\"dark\");\n        localStorage.setItem(\"theme\", \"light\");\n      }\n      return newMode;\n    });\n  };\n\n  return (\n    <ThemeContext.Provider value={{ isDarkMode, toggleTheme }}>\n      {children}\n    </ThemeContext.Provider>\n  );\n};\n\nexport default ThemeProvider;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,aAAa,EAAEC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAElE,OAAO,MAAMC,YAAY,gBAAGL,aAAa,CAAC,CAAC;AAE3C,OAAO,MAAMM,aAAa,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAAAC,EAAA;EAC7C,MAAM,CAACC,UAAU,EAAEC,aAAa,CAAC,GAAGT,QAAQ,CAAC,KAAK,CAAC;;EAEnD;EACAC,SAAS,CAAC,MAAM;IACd,MAAMS,UAAU,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;IAChD,IAAIF,UAAU,KAAK,MAAM,EAAE;MACzBD,aAAa,CAAC,IAAI,CAAC;MACnBI,QAAQ,CAACC,eAAe,CAACC,SAAS,CAACC,GAAG,CAAC,MAAM,CAAC;IAChD,CAAC,MAAM,IAAIN,UAAU,KAAK,OAAO,EAAE;MACjCD,aAAa,CAAC,KAAK,CAAC;MACpBI,QAAQ,CAACC,eAAe,CAACC,SAAS,CAACE,MAAM,CAAC,MAAM,CAAC;IACnD,CAAC,MAAM;MACL;MACA,MAAMC,WAAW,GAAGC,MAAM,CAACC,UAAU,CACnC,8BACF,CAAC,CAACC,OAAO;MACTZ,aAAa,CAACS,WAAW,CAAC;MAC1B,IAAIA,WAAW,EAAE;QACfL,QAAQ,CAACC,eAAe,CAACC,SAAS,CAACC,GAAG,CAAC,MAAM,CAAC;MAChD;IACF;EACF,CAAC,EAAE,EAAE,CAAC;;EAEN;EACA,MAAMM,WAAW,GAAGA,CAAA,KAAM;IACxBb,aAAa,CAAEc,QAAQ,IAAK;MAC1B,MAAMC,OAAO,GAAG,CAACD,QAAQ;MACzB,IAAIC,OAAO,EAAE;QACXX,QAAQ,CAACC,eAAe,CAACC,SAAS,CAACC,GAAG,CAAC,MAAM,CAAC;QAC9CL,YAAY,CAACc,OAAO,CAAC,OAAO,EAAE,MAAM,CAAC;MACvC,CAAC,MAAM;QACLZ,QAAQ,CAACC,eAAe,CAACC,SAAS,CAACE,MAAM,CAAC,MAAM,CAAC;QACjDN,YAAY,CAACc,OAAO,CAAC,OAAO,EAAE,OAAO,CAAC;MACxC;MACA,OAAOD,OAAO;IAChB,CAAC,CAAC;EACJ,CAAC;EAED,oBACErB,OAAA,CAACC,YAAY,CAACsB,QAAQ;IAACC,KAAK,EAAE;MAAEnB,UAAU;MAAEc;IAAY,CAAE;IAAAhB,QAAA,EACvDA;EAAQ;IAAAsB,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACY,CAAC;AAE5B,CAAC;AAACxB,EAAA,CA5CWF,aAAa;AAAA2B,EAAA,GAAb3B,aAAa;AA8C1B,eAAeA,aAAa;AAAC,IAAA2B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}