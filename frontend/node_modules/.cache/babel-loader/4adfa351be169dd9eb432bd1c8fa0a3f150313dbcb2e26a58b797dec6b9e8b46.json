{"ast":null,"code":"/**\n * Format date to a readable string\n * @param {Date|string|number} date - Date to format\n * @returns {string} Formatted date string\n */export const formatDate=date=>{const d=new Date(date);return d.toLocaleDateString(\"en-US\",{year:\"numeric\",month:\"short\",day:\"numeric\",hour:\"2-digit\",minute:\"2-digit\"});};/**\n * Format address to a shortened form\n * @param {string} address - Ethereum address\n * @returns {string} Shortened address (e.g., 0x1234...5678)\n */export const shortenAddress=address=>{if(!address)return\"\";return\"\".concat(address.substring(0,6),\"...\").concat(address.substring(address.length-4));};/**\n * Format amount with token symbol\n * @param {string|number} amount - Token amount\n * @param {string} tokenType - Token type\n * @returns {string} Formatted amount with token symbol\n */export const formatAmount=(amount,tokenType)=>{// Convert to number and handle scientific notation\nconst num=parseFloat(amount);// Format based on size\nlet formatted;if(num>=1e9){formatted=\"\".concat((num/1e9).toFixed(2),\"B\");}else if(num>=1e6){formatted=\"\".concat((num/1e6).toFixed(2),\"M\");}else if(num>=1e3){formatted=\"\".concat((num/1e3).toFixed(2),\"K\");}else{formatted=num.toFixed(4);}// Remove trailing zeros after decimal\nformatted=formatted.replace(/\\.0+$/,\"\");formatted=formatted.replace(/(\\.\\d*?)0+$/,\"$1\");return\"\".concat(formatted,\" \").concat(tokenType);};/**\n * Format USD amount\n * @param {string|number} amount - USD amount\n * @returns {string} Formatted USD amount\n */export const formatUSD=amount=>{return new Intl.NumberFormat(\"en-US\",{style:\"currency\",currency:\"USD\",minimumFractionDigits:2,maximumFractionDigits:2}).format(amount);};/**\n * Calculate time remaining until a deadline\n * @param {Date|string|number} deadline - Deadline timestamp\n * @returns {Object} Object with days, hours, minutes, seconds, and isExpired flag\n */export const getTimeRemaining=deadline=>{const total=new Date(deadline)-new Date();const isExpired=total<=0;// Return all zeros if expired\nif(isExpired){return{days:0,hours:0,minutes:0,seconds:0,isExpired:true};}const seconds=Math.floor(total/1000%60);const minutes=Math.floor(total/1000/60%60);const hours=Math.floor(total/(1000*60*60)%24);const days=Math.floor(total/(1000*60*60*24));return{days,hours,minutes,seconds,isExpired:false};};/**\n * Format time remaining as a string\n * @param {Object} timeRemaining - Time remaining object from getTimeRemaining\n * @returns {string} Formatted time string\n */export const formatTimeRemaining=timeRemaining=>{if(timeRemaining.isExpired){return\"Expired\";}const parts=[];if(timeRemaining.days>0){parts.push(\"\".concat(timeRemaining.days,\"d\"));}if(timeRemaining.hours>0||parts.length>0){parts.push(\"\".concat(timeRemaining.hours,\"h\"));}if(timeRemaining.minutes>0||parts.length>0){parts.push(\"\".concat(timeRemaining.minutes,\"m\"));}parts.push(\"\".concat(timeRemaining.seconds,\"s\"));return parts.join(\" \");};/**\n * Determine the voting phase based on content data\n * @param {Object} content - Content item data\n * @returns {string} Voting phase ('commit', 'reveal', 'finalized', or 'pending')\n */export const getVotingPhase=content=>{const now=new Date().getTime();const commitDeadline=new Date(content.commitDeadline).getTime();const revealDeadline=new Date(content.revealDeadline).getTime();if(content.finalized){return\"finalized\";}if(now<commitDeadline){return\"commit\";}if(now<revealDeadline){return\"reveal\";}return\"pending\";};/**\n * Check if an object is empty\n * @param {Object} obj - Object to check\n * @returns {boolean} True if object is empty\n */export const isEmptyObject=obj=>{return obj&&Object.keys(obj).length===0&&obj.constructor===Object;};/**\n * Parse error message from API or blockchain error\n * @param {Error} error - Error object\n * @returns {string} Parsed error message\n */export const parseErrorMessage=error=>{if(!error)return\"An unknown error occurred\";// Handle axios error\nif(error.response&&error.response.data){const{message,error:errorMsg}=error.response.data;return message||errorMsg||error.response.data;}// Handle ethers.js error\nif(error.reason){return error.reason;}// Handle standard error\nreturn error.message||String(error);};","map":{"version":3,"names":["formatDate","date","d","Date","toLocaleDateString","year","month","day","hour","minute","shortenAddress","address","concat","substring","length","formatAmount","amount","tokenType","num","parseFloat","formatted","toFixed","replace","formatUSD","Intl","NumberFormat","style","currency","minimumFractionDigits","maximumFractionDigits","format","getTimeRemaining","deadline","total","isExpired","days","hours","minutes","seconds","Math","floor","formatTimeRemaining","timeRemaining","parts","push","join","getVotingPhase","content","now","getTime","commitDeadline","revealDeadline","finalized","isEmptyObject","obj","Object","keys","constructor","parseErrorMessage","error","response","data","message","errorMsg","reason","String"],"sources":["/home/nishant/Downloads/proofchain/frontend/src/utils/helpers.js"],"sourcesContent":["/**\n * Format date to a readable string\n * @param {Date|string|number} date - Date to format\n * @returns {string} Formatted date string\n */\nexport const formatDate = (date) => {\n  const d = new Date(date);\n  return d.toLocaleDateString(\"en-US\", {\n    year: \"numeric\",\n    month: \"short\",\n    day: \"numeric\",\n    hour: \"2-digit\",\n    minute: \"2-digit\",\n  });\n};\n\n/**\n * Format address to a shortened form\n * @param {string} address - Ethereum address\n * @returns {string} Shortened address (e.g., 0x1234...5678)\n */\nexport const shortenAddress = (address) => {\n  if (!address) return \"\";\n  return `${address.substring(0, 6)}...${address.substring(\n    address.length - 4\n  )}`;\n};\n\n/**\n * Format amount with token symbol\n * @param {string|number} amount - Token amount\n * @param {string} tokenType - Token type\n * @returns {string} Formatted amount with token symbol\n */\nexport const formatAmount = (amount, tokenType) => {\n  // Convert to number and handle scientific notation\n  const num = parseFloat(amount);\n\n  // Format based on size\n  let formatted;\n  if (num >= 1e9) {\n    formatted = `${(num / 1e9).toFixed(2)}B`;\n  } else if (num >= 1e6) {\n    formatted = `${(num / 1e6).toFixed(2)}M`;\n  } else if (num >= 1e3) {\n    formatted = `${(num / 1e3).toFixed(2)}K`;\n  } else {\n    formatted = num.toFixed(4);\n  }\n\n  // Remove trailing zeros after decimal\n  formatted = formatted.replace(/\\.0+$/, \"\");\n  formatted = formatted.replace(/(\\.\\d*?)0+$/, \"$1\");\n\n  return `${formatted} ${tokenType}`;\n};\n\n/**\n * Format USD amount\n * @param {string|number} amount - USD amount\n * @returns {string} Formatted USD amount\n */\nexport const formatUSD = (amount) => {\n  return new Intl.NumberFormat(\"en-US\", {\n    style: \"currency\",\n    currency: \"USD\",\n    minimumFractionDigits: 2,\n    maximumFractionDigits: 2,\n  }).format(amount);\n};\n\n/**\n * Calculate time remaining until a deadline\n * @param {Date|string|number} deadline - Deadline timestamp\n * @returns {Object} Object with days, hours, minutes, seconds, and isExpired flag\n */\nexport const getTimeRemaining = (deadline) => {\n  const total = new Date(deadline) - new Date();\n  const isExpired = total <= 0;\n\n  // Return all zeros if expired\n  if (isExpired) {\n    return {\n      days: 0,\n      hours: 0,\n      minutes: 0,\n      seconds: 0,\n      isExpired: true,\n    };\n  }\n\n  const seconds = Math.floor((total / 1000) % 60);\n  const minutes = Math.floor((total / 1000 / 60) % 60);\n  const hours = Math.floor((total / (1000 * 60 * 60)) % 24);\n  const days = Math.floor(total / (1000 * 60 * 60 * 24));\n\n  return {\n    days,\n    hours,\n    minutes,\n    seconds,\n    isExpired: false,\n  };\n};\n\n/**\n * Format time remaining as a string\n * @param {Object} timeRemaining - Time remaining object from getTimeRemaining\n * @returns {string} Formatted time string\n */\nexport const formatTimeRemaining = (timeRemaining) => {\n  if (timeRemaining.isExpired) {\n    return \"Expired\";\n  }\n\n  const parts = [];\n\n  if (timeRemaining.days > 0) {\n    parts.push(`${timeRemaining.days}d`);\n  }\n\n  if (timeRemaining.hours > 0 || parts.length > 0) {\n    parts.push(`${timeRemaining.hours}h`);\n  }\n\n  if (timeRemaining.minutes > 0 || parts.length > 0) {\n    parts.push(`${timeRemaining.minutes}m`);\n  }\n\n  parts.push(`${timeRemaining.seconds}s`);\n\n  return parts.join(\" \");\n};\n\n/**\n * Determine the voting phase based on content data\n * @param {Object} content - Content item data\n * @returns {string} Voting phase ('commit', 'reveal', 'finalized', or 'pending')\n */\nexport const getVotingPhase = (content) => {\n  const now = new Date().getTime();\n  const commitDeadline = new Date(content.commitDeadline).getTime();\n  const revealDeadline = new Date(content.revealDeadline).getTime();\n\n  if (content.finalized) {\n    return \"finalized\";\n  }\n\n  if (now < commitDeadline) {\n    return \"commit\";\n  }\n\n  if (now < revealDeadline) {\n    return \"reveal\";\n  }\n\n  return \"pending\";\n};\n\n/**\n * Check if an object is empty\n * @param {Object} obj - Object to check\n * @returns {boolean} True if object is empty\n */\nexport const isEmptyObject = (obj) => {\n  return obj && Object.keys(obj).length === 0 && obj.constructor === Object;\n};\n\n/**\n * Parse error message from API or blockchain error\n * @param {Error} error - Error object\n * @returns {string} Parsed error message\n */\nexport const parseErrorMessage = (error) => {\n  if (!error) return \"An unknown error occurred\";\n\n  // Handle axios error\n  if (error.response && error.response.data) {\n    const { message, error: errorMsg } = error.response.data;\n    return message || errorMsg || error.response.data;\n  }\n\n  // Handle ethers.js error\n  if (error.reason) {\n    return error.reason;\n  }\n\n  // Handle standard error\n  return error.message || String(error);\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}