{"ast":null,"code":"/**\n * Format date to a readable string\n * @param {Date|string|number} date - Date to format\n * @returns {string} Formatted date string\n */\nexport const formatDate = date => {\n  const d = new Date(date);\n  return d.toLocaleDateString(\"en-US\", {\n    year: \"numeric\",\n    month: \"short\",\n    day: \"numeric\",\n    hour: \"2-digit\",\n    minute: \"2-digit\"\n  });\n};\n\n/**\n * Format address to a shortened form\n * @param {string} address - Ethereum address\n * @returns {string} Shortened address (e.g., 0x1234...5678)\n */\nexport const shortenAddress = address => {\n  if (!address) return \"\";\n  return `${address.substring(0, 6)}...${address.substring(address.length - 4)}`;\n};\n\n/**\n * Format amount with token symbol\n * @param {string|number} amount - Token amount\n * @param {string} tokenType - Token type\n * @returns {string} Formatted amount with token symbol\n */\nexport const formatAmount = (amount, tokenType) => {\n  // Convert to number and handle scientific notation\n  const num = parseFloat(amount);\n\n  // Format based on size\n  let formatted;\n  if (num >= 1e9) {\n    formatted = `${(num / 1e9).toFixed(2)}B`;\n  } else if (num >= 1e6) {\n    formatted = `${(num / 1e6).toFixed(2)}M`;\n  } else if (num >= 1e3) {\n    formatted = `${(num / 1e3).toFixed(2)}K`;\n  } else {\n    formatted = num.toFixed(4);\n  }\n\n  // Remove trailing zeros after decimal\n  formatted = formatted.replace(/\\.0+$/, \"\");\n  formatted = formatted.replace(/(\\.\\d*?)0+$/, \"$1\");\n  return `${formatted} ${tokenType}`;\n};\n\n/**\n * Format USD amount\n * @param {string|number} amount - USD amount\n * @returns {string} Formatted USD amount\n */\nexport const formatUSD = amount => {\n  return new Intl.NumberFormat(\"en-US\", {\n    style: \"currency\",\n    currency: \"USD\",\n    minimumFractionDigits: 2,\n    maximumFractionDigits: 2\n  }).format(amount);\n};\n\n/**\n * Calculate time remaining until a deadline\n * @param {Date|string|number} deadline - Deadline timestamp\n * @returns {Object} Object with days, hours, minutes, seconds, and isExpired flag\n */\nexport const getTimeRemaining = deadline => {\n  const total = new Date(deadline) - new Date();\n  const isExpired = total <= 0;\n\n  // Return all zeros if expired\n  if (isExpired) {\n    return {\n      days: 0,\n      hours: 0,\n      minutes: 0,\n      seconds: 0,\n      isExpired: true\n    };\n  }\n  const seconds = Math.floor(total / 1000 % 60);\n  const minutes = Math.floor(total / 1000 / 60 % 60);\n  const hours = Math.floor(total / (1000 * 60 * 60) % 24);\n  const days = Math.floor(total / (1000 * 60 * 60 * 24));\n  return {\n    days,\n    hours,\n    minutes,\n    seconds,\n    isExpired: false\n  };\n};\n\n/**\n * Format time remaining as a string\n * @param {Object} timeRemaining - Time remaining object from getTimeRemaining\n * @returns {string} Formatted time string\n */\nexport const formatTimeRemaining = timeRemaining => {\n  if (timeRemaining.isExpired) {\n    return \"Expired\";\n  }\n  const parts = [];\n  if (timeRemaining.days > 0) {\n    parts.push(`${timeRemaining.days}d`);\n  }\n  if (timeRemaining.hours > 0 || parts.length > 0) {\n    parts.push(`${timeRemaining.hours}h`);\n  }\n  if (timeRemaining.minutes > 0 || parts.length > 0) {\n    parts.push(`${timeRemaining.minutes}m`);\n  }\n  parts.push(`${timeRemaining.seconds}s`);\n  return parts.join(\" \");\n};\n\n/**\n * Determine the voting phase based on content data\n * @param {Object} content - Content item data\n * @returns {string} Voting phase ('commit', 'reveal', 'finalized', or 'pending')\n */\nexport const getVotingPhase = content => {\n  const now = new Date().getTime();\n  const commitDeadline = new Date(content.commitDeadline).getTime();\n  const revealDeadline = new Date(content.revealDeadline).getTime();\n  if (content.finalized) {\n    return \"finalized\";\n  }\n  if (now < commitDeadline) {\n    return \"commit\";\n  }\n  if (now < revealDeadline) {\n    return \"reveal\";\n  }\n  return \"pending\";\n};\n\n/**\n * Check if an object is empty\n * @param {Object} obj - Object to check\n * @returns {boolean} True if object is empty\n */\nexport const isEmptyObject = obj => {\n  return obj && Object.keys(obj).length === 0 && obj.constructor === Object;\n};\n\n/**\n * Parse error message from API or blockchain error\n * @param {Error} error - Error object\n * @returns {string} Parsed error message\n */\nexport const parseErrorMessage = error => {\n  if (!error) return \"An unknown error occurred\";\n\n  // Handle axios error\n  if (error.response && error.response.data) {\n    const {\n      message,\n      error: errorMsg\n    } = error.response.data;\n    return message || errorMsg || error.response.data;\n  }\n\n  // Handle ethers.js error\n  if (error.reason) {\n    return error.reason;\n  }\n\n  // Handle standard error\n  return error.message || String(error);\n};","map":{"version":3,"names":["formatDate","date","d","Date","toLocaleDateString","year","month","day","hour","minute","shortenAddress","address","substring","length","formatAmount","amount","tokenType","num","parseFloat","formatted","toFixed","replace","formatUSD","Intl","NumberFormat","style","currency","minimumFractionDigits","maximumFractionDigits","format","getTimeRemaining","deadline","total","isExpired","days","hours","minutes","seconds","Math","floor","formatTimeRemaining","timeRemaining","parts","push","join","getVotingPhase","content","now","getTime","commitDeadline","revealDeadline","finalized","isEmptyObject","obj","Object","keys","constructor","parseErrorMessage","error","response","data","message","errorMsg","reason","String"],"sources":["/home/nishant/proofchain/frontend/src/utils/helpers.js"],"sourcesContent":["/**\n * Format date to a readable string\n * @param {Date|string|number} date - Date to format\n * @returns {string} Formatted date string\n */\nexport const formatDate = (date) => {\n  const d = new Date(date);\n  return d.toLocaleDateString(\"en-US\", {\n    year: \"numeric\",\n    month: \"short\",\n    day: \"numeric\",\n    hour: \"2-digit\",\n    minute: \"2-digit\",\n  });\n};\n\n/**\n * Format address to a shortened form\n * @param {string} address - Ethereum address\n * @returns {string} Shortened address (e.g., 0x1234...5678)\n */\nexport const shortenAddress = (address) => {\n  if (!address) return \"\";\n  return `${address.substring(0, 6)}...${address.substring(\n    address.length - 4\n  )}`;\n};\n\n/**\n * Format amount with token symbol\n * @param {string|number} amount - Token amount\n * @param {string} tokenType - Token type\n * @returns {string} Formatted amount with token symbol\n */\nexport const formatAmount = (amount, tokenType) => {\n  // Convert to number and handle scientific notation\n  const num = parseFloat(amount);\n\n  // Format based on size\n  let formatted;\n  if (num >= 1e9) {\n    formatted = `${(num / 1e9).toFixed(2)}B`;\n  } else if (num >= 1e6) {\n    formatted = `${(num / 1e6).toFixed(2)}M`;\n  } else if (num >= 1e3) {\n    formatted = `${(num / 1e3).toFixed(2)}K`;\n  } else {\n    formatted = num.toFixed(4);\n  }\n\n  // Remove trailing zeros after decimal\n  formatted = formatted.replace(/\\.0+$/, \"\");\n  formatted = formatted.replace(/(\\.\\d*?)0+$/, \"$1\");\n\n  return `${formatted} ${tokenType}`;\n};\n\n/**\n * Format USD amount\n * @param {string|number} amount - USD amount\n * @returns {string} Formatted USD amount\n */\nexport const formatUSD = (amount) => {\n  return new Intl.NumberFormat(\"en-US\", {\n    style: \"currency\",\n    currency: \"USD\",\n    minimumFractionDigits: 2,\n    maximumFractionDigits: 2,\n  }).format(amount);\n};\n\n/**\n * Calculate time remaining until a deadline\n * @param {Date|string|number} deadline - Deadline timestamp\n * @returns {Object} Object with days, hours, minutes, seconds, and isExpired flag\n */\nexport const getTimeRemaining = (deadline) => {\n  const total = new Date(deadline) - new Date();\n  const isExpired = total <= 0;\n\n  // Return all zeros if expired\n  if (isExpired) {\n    return {\n      days: 0,\n      hours: 0,\n      minutes: 0,\n      seconds: 0,\n      isExpired: true,\n    };\n  }\n\n  const seconds = Math.floor((total / 1000) % 60);\n  const minutes = Math.floor((total / 1000 / 60) % 60);\n  const hours = Math.floor((total / (1000 * 60 * 60)) % 24);\n  const days = Math.floor(total / (1000 * 60 * 60 * 24));\n\n  return {\n    days,\n    hours,\n    minutes,\n    seconds,\n    isExpired: false,\n  };\n};\n\n/**\n * Format time remaining as a string\n * @param {Object} timeRemaining - Time remaining object from getTimeRemaining\n * @returns {string} Formatted time string\n */\nexport const formatTimeRemaining = (timeRemaining) => {\n  if (timeRemaining.isExpired) {\n    return \"Expired\";\n  }\n\n  const parts = [];\n\n  if (timeRemaining.days > 0) {\n    parts.push(`${timeRemaining.days}d`);\n  }\n\n  if (timeRemaining.hours > 0 || parts.length > 0) {\n    parts.push(`${timeRemaining.hours}h`);\n  }\n\n  if (timeRemaining.minutes > 0 || parts.length > 0) {\n    parts.push(`${timeRemaining.minutes}m`);\n  }\n\n  parts.push(`${timeRemaining.seconds}s`);\n\n  return parts.join(\" \");\n};\n\n/**\n * Determine the voting phase based on content data\n * @param {Object} content - Content item data\n * @returns {string} Voting phase ('commit', 'reveal', 'finalized', or 'pending')\n */\nexport const getVotingPhase = (content) => {\n  const now = new Date().getTime();\n  const commitDeadline = new Date(content.commitDeadline).getTime();\n  const revealDeadline = new Date(content.revealDeadline).getTime();\n\n  if (content.finalized) {\n    return \"finalized\";\n  }\n\n  if (now < commitDeadline) {\n    return \"commit\";\n  }\n\n  if (now < revealDeadline) {\n    return \"reveal\";\n  }\n\n  return \"pending\";\n};\n\n/**\n * Check if an object is empty\n * @param {Object} obj - Object to check\n * @returns {boolean} True if object is empty\n */\nexport const isEmptyObject = (obj) => {\n  return obj && Object.keys(obj).length === 0 && obj.constructor === Object;\n};\n\n/**\n * Parse error message from API or blockchain error\n * @param {Error} error - Error object\n * @returns {string} Parsed error message\n */\nexport const parseErrorMessage = (error) => {\n  if (!error) return \"An unknown error occurred\";\n\n  // Handle axios error\n  if (error.response && error.response.data) {\n    const { message, error: errorMsg } = error.response.data;\n    return message || errorMsg || error.response.data;\n  }\n\n  // Handle ethers.js error\n  if (error.reason) {\n    return error.reason;\n  }\n\n  // Handle standard error\n  return error.message || String(error);\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}